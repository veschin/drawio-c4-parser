{"version":3,"sources":["drawio_ui/storage.cljs"],"mappings":"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","names":["drawio-ui.storage/storage-keys","drawio-ui.storage/default-settings","drawio-ui.storage/get-storage-item","key","temp__5804__auto__","data","js/localStorage","e23076","cljs.reader.read_string","js/Error","e","js/console.warn","drawio-ui.storage/set-storage-item","e23077","cljs.core.pr_str","js/console.error","drawio-ui.storage/get-diagrams","or__5002__auto__","drawio-ui.storage/get-settings","cljs.core.merge","drawio-ui.storage/get-comparison-cache","drawio-ui.storage/save-diagrams","diagrams","drawio-ui.storage/save-settings","settings","drawio-ui.storage/save-comparison-cache","cache","drawio-ui.storage/generate-diagram-id","js/Date","cljs.core/rand-int","drawio-ui.storage/generate-version-id","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","drawio-ui.storage/add-diagram","p__23093","map__23094","cljs.core/--destructure-map","cljs.core.get","seq23086","G__23087","cljs.core/first","cljs.core/next","G__23088","G__23089","G__23092","self__5711__auto__","name","xml-data","parsed-json","source-type","filename","description","tags","diagram-id","version-id","timestamp","version","cljs.core._EQ_","diagram","updated-diagrams","cljs.core.assoc","drawio-ui.storage/add-version","p__23112","map__23114","seq23103","G__23105","G__23106","G__23107","G__23108","change-summary","updated-versions","cljs.core.conj","updated-diagram","cljs.core/assoc-in","drawio-ui.storage/get-diagram","drawio-ui.storage/get-version","p1__23126#","cljs.core.filter","drawio-ui.storage/delete-diagram","cljs.core.dissoc","drawio-ui.storage/cleanup-old-versions","max-versions","cljs.core.get_in","versions","sorted-versions","p1__23131#","p2__23130#","cljs.core.sort_by","cljs.core/compare","kept-versions","cljs.core.take","drawio-ui.storage/get-storage-stats","total-size","js/Object","p1__23132#","cljs.core.map","cljs.core.reduce","cljs.core/+","diagram-count","cljs.core/count","version-count","cljs.core/vals","p1__23133#","drawio-ui.storage/init!","stats","js/console.log","cljs.core/clj->js"],"sourcesContent":["(ns drawio-ui.storage\n  (:require [cljs.reader :as reader]))\n\n(def storage-keys\n  {:diagrams \"drawio-diagrams\"\n   :settings \"drawio-app-settings\"\n   :comparison-cache \"drawio-comparison-cache\"})\n\n(def default-settings\n  {:storage {:max-versions-per-diagram 50\n             :auto-cleanup-enabled true\n             :max-total-storage-mb 50\n             :thumbnail-size {:width 200 :height 150}}\n   :ui {:default-comparison-view :side-by-side\n        :show-statistics true\n        :auto-save-editor true}})\n\n(defn- get-storage-item [key]\n  (when-let [data (.getItem js/localStorage key)]\n    (try\n      (reader/read-string data)\n      (catch js/Error e\n        (js/console.warn (str \"Failed to parse localStorage item: \" key) e)\n        nil))))\n\n(defn- set-storage-item [key data]\n  (try\n    (.setItem js/localStorage key (pr-str data))\n    true\n    (catch js/Error e\n      (js/console.error (str \"Failed to save to localStorage: \" key) e)\n      false)))\n\n\n(defn get-diagrams []\n  (or (get-storage-item (:diagrams storage-keys)) {}))\n\n(defn get-settings []\n  (merge default-settings \n         (get-storage-item (:settings storage-keys))))\n\n(defn get-comparison-cache []\n  (or (get-storage-item (:comparison-cache storage-keys)) {}))\n\n(defn save-diagrams [diagrams]\n  (set-storage-item (:diagrams storage-keys) diagrams))\n\n(defn save-settings [settings]\n  (set-storage-item (:settings storage-keys) settings))\n\n(defn save-comparison-cache [cache]\n  (set-storage-item (:comparison-cache storage-keys) cache))\n\n(defn generate-diagram-id []\n  (str \"diagram-\" (.getTime (js/Date.)) \"-\" (rand-int 10000)))\n\n(defn generate-version-id []\n  (str \"v-\" (.toISOString (js/Date.))))\n\n(defn add-diagram [name xml-data parsed-json source-type & {:keys [filename description tags]}]\n  (let [diagrams (get-diagrams)\n        diagram-id (generate-diagram-id)\n        version-id (generate-version-id)\n        timestamp (.toISOString (js/Date.))\n        version {:version-id version-id\n                 :timestamp timestamp\n                 :source-type source-type\n                 :source-filename filename\n                 :raw-xml xml-data\n                 :parsed-json parsed-json\n                 :thumbnail-data nil ; Will be populated by render service\n                 :change-summary (if (= source-type :upload) \"Initial upload\" \"New version\")}\n        diagram {:metadata {:name name\n                           :created-at timestamp\n                           :last-modified timestamp\n                           :tags (or tags [])\n                           :description (or description \"\")}\n                :versions [version]\n                :current-version version-id}\n        updated-diagrams (assoc diagrams diagram-id diagram)]\n    (when (save-diagrams updated-diagrams)\n      diagram-id)))\n\n(defn add-version [diagram-id xml-data parsed-json source-type & {:keys [filename change-summary]}]\n  (let [diagrams (get-diagrams)]\n    (when-let [diagram (get diagrams diagram-id)]\n      (let [version-id (generate-version-id)\n            timestamp (.toISOString (js/Date.))\n            version {:version-id version-id\n                     :timestamp timestamp\n                     :source-type source-type\n                     :source-filename filename\n                     :raw-xml xml-data\n                     :parsed-json parsed-json\n                     :thumbnail-data nil\n                     :change-summary (or change-summary \"Updated version\")}\n            updated-versions (conj (:versions diagram) version)\n            updated-diagram (-> diagram\n                               (assoc :versions updated-versions)\n                               (assoc :current-version version-id)\n                               (assoc-in [:metadata :last-modified] timestamp))\n            updated-diagrams (assoc diagrams diagram-id updated-diagram)]\n        (when (save-diagrams updated-diagrams)\n          version-id)))))\n\n(defn get-diagram [diagram-id]\n  (get (get-diagrams) diagram-id))\n\n(defn get-version [diagram-id version-id]\n  (when-let [diagram (get-diagram diagram-id)]\n    (first (filter #(= version-id (:version-id %)) (:versions diagram)))))\n\n(defn delete-diagram [diagram-id]\n  (let [diagrams (get-diagrams)\n        updated-diagrams (dissoc diagrams diagram-id)]\n    (save-diagrams updated-diagrams)))\n\n(defn cleanup-old-versions [diagram-id]\n  (let [settings (get-settings)\n        max-versions (get-in settings [:storage :max-versions-per-diagram])\n        diagrams (get-diagrams)]\n    (when-let [diagram (get diagrams diagram-id)]\n      (let [versions (:versions diagram)\n            sorted-versions (sort-by :timestamp #(compare %2 %1) versions)\n            kept-versions (take max-versions sorted-versions)\n            updated-diagram (assoc diagram :versions kept-versions)\n            updated-diagrams (assoc diagrams diagram-id updated-diagram)]\n        (save-diagrams updated-diagrams)))))\n\n(defn get-storage-stats []\n  (let [total-size (->> (.keys js/Object js/localStorage)\n                       (map #(.length (.getItem js/localStorage %)))\n                       (reduce +))\n        diagram-count (count (get-diagrams))\n        version-count (->> (get-diagrams)\n                          vals\n                          (map #(count (:versions %)))\n                          (reduce +))]\n    {:total-size-bytes total-size\n     :total-size-mb (/ total-size 1024 1024)\n     :diagram-count diagram-count\n     :version-count version-count}))\n\n(defn init! []\n  ;; Initialize settings if not present\n  (when-not (get-storage-item (:settings storage-keys))\n    (save-settings default-settings))\n  \n  ;; Log storage stats\n  (let [stats (get-storage-stats)]\n    (js/console.log \"Storage initialized:\" (clj->js stats))))"]}