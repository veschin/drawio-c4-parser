{"version":3,"sources":["drawio_ui/api.cljs"],"mappings":"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","names":["drawio-ui.api/api-base","drawio-ui.api/api-url","endpoint","drawio-ui.api/handle-response","response-chan","response","cljs.core.async.put_BANG_","drawio-ui.api/handle-error","error","message","or__5002__auto__","cljs.core.get_in","drawio-ui.api/parse-export","xml-data","cljs.core.async.chan","ajax.core.POST","drawio-ui.api/parse-paste","paste-data","drawio-ui.api/parse-png","png-file","form-data","js/FormData","drawio-ui.api/render-png","options","body","drawio-ui.api/render-svg","drawio-ui.api/health-check","ajax.core.GET","drawio-ui.api/upload-and-parse","file","source-type","c__14652__auto__","cljs.core.async.impl.dispatch/run","f__14653__auto__","switch__14330__auto__","state_23189","state_val_23190","inst_23155","inst_23156","js/Promise","cljs.core.async.impl.ioc-helpers/take!","inst_23173","inst_23174","inst_23179","inst_23180","inst_23181","cljs.core/PersistentHashMap","statearr-23192","statearr-23193","inst_23141","inst_23142","inst_23143","inst_23144","inst_23145","inst_23146","statearr-23194","inst_23170","inst_23175","statearr-23195","statearr-23196","statearr-23197","inst_23160","inst_23165","statearr-23198","statearr-23199","inst_23184","_","statearr-23200","cljs.core/rest","statearr-23201","inst_23187","cljs.core.async.impl.ioc-helpers/return-chan","inst_23163","statearr-23202","statearr-23203","cljs.core/cons","inst_23152","statearr-23204","statearr-23205","statearr-23206","inst_23161","statearr-23208","inst_23158","statearr-23209","statearr-23210","ex23207","statearr-23211","statearr-23212","inst_23171","statearr-23213","statearr-23214","statearr-23215","statearr-23216","inst_23168","statearr-23217","statearr-23218","G__23219","cljs.core/Keyword","statearr-23220","statearr-23221","statearr-23222","js/Error","statearr-23223","state-machine__14331__auto__","ret-value__14332__auto__","result__14333__auto__","cljs.core/keyword-identical?","ex__14334__auto__","e23224","statearr-23225","cljs.core/seq","statearr-23226","cljs.core/first","state__14654__auto__","statearr-23227","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core._EQ_","resolve","reject","reader","js/FileReader","p1__23140#","G__23191","drawio-ui.api/generate-thumbnail","state_23241","state_val_23242","inst_23228","inst_23229","inst_23230","inst_23231","inst_23233","inst_23234","statearr-23243","statearr-23244","statearr-23245","inst_23236","statearr-23246","statearr-23247","inst_23239","statearr-23248","e23249","statearr-23250","statearr-23251","statearr-23252"],"sourcesContent":["(ns drawio-ui.api\n  (:require [ajax.core :as ajax]\n            [cljs.core.async :as async :refer [chan put! <!]])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(def api-base \"/api/v1\")\n\n(defn- api-url [endpoint]\n  (str api-base endpoint))\n\n(defn- handle-response [response-chan]\n  (fn [response]\n    (put! response-chan {:success true :data response})))\n\n(defn- handle-error [response-chan]\n  (fn [error]\n    (let [message (or (get-in error [:response :message])\n                      (get-in error [:response :error])\n                      \"Unknown error occurred\")]\n      (put! response-chan {:success false :error message}))))\n\n(defn parse-export \n  \"Parse Draw.io XML export data\"\n  [xml-data]\n  (let [response-chan (chan)]\n    (ajax/POST (api-url \"/parse/export\")\n               {:body xml-data\n                :format :raw\n                :response-format :json\n                :keywords? true\n                :handler (handle-response response-chan)\n                :error-handler (handle-error response-chan)})\n    response-chan))\n\n(defn parse-paste \n  \"Parse Draw.io paste data (URL-encoded)\"\n  [paste-data]\n  (let [response-chan (chan)]\n    (ajax/POST (api-url \"/parse/paste\")\n               {:body paste-data\n                :format :raw\n                :response-format :json\n                :keywords? true\n                :handler (handle-response response-chan)\n                :error-handler (handle-error response-chan)})\n    response-chan))\n\n(defn parse-png \n  \"Parse PNG file with embedded Draw.io data\"\n  [png-file]\n  (let [response-chan (chan)\n        form-data (js/FormData.)]\n    (.append form-data \"file\" png-file)\n    (ajax/POST (api-url \"/parse/png\")\n               {:body png-file\n                :format :raw\n                :response-format :json\n                :keywords? true\n                :handler (handle-response response-chan)\n                :error-handler (handle-error response-chan)})\n    response-chan))\n\n(defn render-png \n  \"Render Draw.io XML to PNG using headless Chrome\"\n  [xml-data options]\n  (let [response-chan (chan)\n        body {:xml xml-data\n              :width (:width options 800)\n              :height (:height options 600)\n              :theme (:theme options \"white\")}]\n    (ajax/POST (api-url \"/render/png\")\n               {:params body\n                :format :json\n                :response-format :json\n                :keywords? true\n                :handler (handle-response response-chan)\n                :error-handler (handle-error response-chan)})\n    response-chan))\n\n(defn render-svg \n  \"Render Draw.io XML to SVG using headless Chrome\"\n  [xml-data options]\n  (let [response-chan (chan)\n        body {:xml xml-data\n              :width (:width options 800)\n              :height (:height options 600)\n              :theme (:theme options \"white\")}]\n    (ajax/POST (api-url \"/render/svg\")\n               {:params body\n                :format :json\n                :response-format :json\n                :keywords? true\n                :handler (handle-response response-chan)\n                :error-handler (handle-error response-chan)})\n    response-chan))\n\n(defn health-check \n  \"Check API and rendering service health\"\n  []\n  (let [response-chan (chan)]\n    (ajax/GET (api-url \"/health\")\n              {:response-format :json\n               :keywords? true\n               :handler (handle-response response-chan)\n               :error-handler (handle-error response-chan)})\n    response-chan))\n\n(defn upload-and-parse \n  \"Upload file and parse based on type\"\n  [file source-type]\n  (go\n    (try\n      (let [file-content (if (= source-type :png)\n                          file\n                          (<! (js/Promise. (fn [resolve reject]\n                                           (let [reader (js/FileReader.)]\n                                             (set! (.-onload reader)\n                                                   #(resolve (.. % -target -result)))\n                                             (set! (.-onerror reader) reject)\n                                             (.readAsText reader file))))))\n            response-chan (case source-type\n                           :png (parse-png file)\n                           :export (parse-export file-content)\n                           :paste (parse-paste file-content))\n            result (<! response-chan)]\n        (if (:success result)\n          {:success true \n           :data (:data result)\n           :raw-content (if (= source-type :png) nil file-content)}\n          result))\n      (catch js/Error e\n        {:success false :error (str \"File processing failed: \" (.-message e))}))))\n\n(defn generate-thumbnail \n  \"Generate thumbnail image for diagram\"\n  [xml-data]\n  (go\n    (let [response-chan (render-png xml-data {:width 200 :height 150 :theme \"white\"})\n          result (<! response-chan)]\n      (if (:success result)\n        (:data result)\n        nil))))"]}